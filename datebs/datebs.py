import datetime
import re

BSMonths = [
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],  #2000
    [ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],  #2001
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],
	[ 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],  #2071
	[ 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],  #2072
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31 ],  #2073
	[ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31 ],
	[ 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30 ],
	[ 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30 ],
	[ 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],  #2090
	[ 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30 ],
	[ 30, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30 ],
	[ 30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30 ],
	[ 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30 ],
	[ 31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 29, 31 ],
	[ 31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30 ]   #2099
]


class DateBS:

    year: int = 2000
    month: int = 9
    day: int = 17

    def __init__(self,year: int, month: int, day: int):
        self.year = year
        self.month = month
        self.day = day

    @staticmethod
    def from_string(datestring: str):
        date = re.findall("(?P<year>\d+)-(?P<month>\d+)-(?P<day>\d+)", datestring)
        return DateBS(int(date[0][0]), int(date[0][1]), int(date[0][2]))

    def from_AD(date: datetime.datetime):
        starting_date_AD = datetime.datetime(year=1944, month=1, day=1)
        diff_day = (date - starting_date_AD).days
        starting_date_BS = DateBS(2000,9,17)
        return starting_date_BS.add(day=diff_day)

    def __str__(self):
        return str(self.year) + "-" + str(self.month) + "-" + str(self.day)

    def day_of_year(self) -> int:
        months = self.months_in_year()
        return sum(months[0:self.month]) + self.day

    @staticmethod
    def days_in_year(year: int) -> int:
        return sum(DateBS.months_in_year(year))

    def day_since(self, date : any )  -> int:
        if date is None:
            date = DateBS(2000,9,17)
        days: int = 0 
        for year in range(date.year, self.year):
            days += self.days_in_year(year)
        days = days + self.day_of_year() - date.day_of_year()
        return days

    def add(self, day:int, month:int = 0, year:int = 0 ):
        self.month += month
        self.year += (year + int(self.month / 12))
        self.month = int(self.month%12)
        diff: int = day
        while (diff > 0):
            #import ipdb; ipdb.set_trace()
            days_in_month: int = DateBS.days_in_month(self.year, self.month)
            days_left_in_month: int = days_in_month - self.day + 1
            if (diff > days_left_in_month):
                if (self.month == 12):
                    self.year += 1
                    self.month = 1
                else:
                    self.month += 1
                self.day = 1
                diff -= days_left_in_month
            else:
                self.day += diff
                diff -= diff
        return self

    def to_AD(self):
        starting_date_AD = datetime.datetime(year=1994, month=1, day=1)
        day_since = self.day_since()
        return starting_date_AD + datetime.timedelta(days=day_since)

    @staticmethod
    def months_in_year(year: int):
        year_index = year - 2000
        return BSMonths[year_index]

    @staticmethod
    def days_in_month(year:int, month:int):
        return DateBS.months_in_year(year)[month-1]


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='Convert date from BS to AD and vice-versa')
    parser.add_argument('calendar',type=str, help="calendar system in which date is to be displayed [AD|BS]")
    parser.add_argument('--date',type=str, help="date opporsite to the calendar system")
    args = parser.parse_args()
    if (args.calendar == "BS"):
        if args.date:
            dateBS = DateBS.from_AD(datetime.datetime.strptime(args.date, "%Y-%m-%d"))
        else:
            dateBS = DateBS.from_AD(datetime.datetime.now())
        print(dateBS)
    else:
        if args.date:
            dateBS = DateBS.from_string(args.date)
            print(dateBS.to_AD())
        else:
            print(datetime.datetime.now())
